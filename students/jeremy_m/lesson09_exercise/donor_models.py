import os

def clear_screen():
    """ Clears the terminal screen """
    os.system('cls') if os.name == 'nt' else os.system('clear')

class Donor():
    """ Stores the information for an individual donor """

    def __init__(self, donor_name, donation=None):
        self.donor_name = donor_name
        if donation:
            self.donations = [donation]
        else:
            self.donations = []

    def add_donation(self, new_donation):
        self.donations.append(new_donation)

    def sum_donations(self):
        return sum(self.donations)


class DonorCollection():
    """ Stores info regarding a collection of Donors """
    donors = {}

    def __init__(self):
        pass

    def add_donor(self, donor_name, donation):
        """ 
        Adds a donor and their donation to the donors dict.
        Called in send_a_thank_you()
        """
        if donor_name in self.donors:
            self.donors[donor_name].donations.append(donation)
        else:
            new_donor = Donor(donor_name, donation)
            self.donors[donor_name] = new_donor

    def generate_report(self):
        """ 
            Generates and prints a report of all donors sorted by the sum of
            a donors donations.
        """
        clear_screen()

        sorted_donor_sums = self.sum_donors_donations()
        self.print_report(sorted_donor_sums)

    def sum_donors_donations(self):
        """ Returns a dict sorted by values. The values are the sums of a donors 
            donations
        """
        donor_sums = {
            donor: self.donors[donor].sum_donations() for donor in self.donors}

        sorted_by_values = sorted((value, key)
                                  for (key, value) in donor_sums.items())

        return sorted_by_values

    def print_report(self, sorted_donor_totals):
        """ Formats and prints the report generated by generate_report """
        # This prints the top of the table
        print("{:25} | {:12} | {:<19} | {:<16}".format(
            'Name', 'Total Given', 'Number of Donations', 'Average Donation'))
        print('-' * 81)

        for total_donor in sorted_donor_totals[::-1]:
            print('{:25} | ${:<11,} | {:^19} | ${:<16,}'.format(
                total_donor[1], total_donor[0],
                len(self.donors[total_donor[1]].donations),
                (total_donor[0] / len(self.donors[total_donor[1]].donations))))

        print('\n\n')
